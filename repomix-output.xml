This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.jsx
src/assets/react.svg
src/components/Header.jsx
src/components/Hero.jsx
src/components/Loader.jsx
src/components/MovieDetails.jsx
src/components/ResultsGrid.jsx
src/components/SearchBar.jsx
src/components/TVShowDetails.jsx
src/components/VideoPlayer.jsx
src/index.css
src/main.jsx
src/pages/DetailsPage.jsx
src/pages/Home.jsx
src/services/streamApi.js
src/services/tmbdApi.js
src/utils/encoder.js
src/utils/slug.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>dotflix_1</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "dotflix_1",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.13",
    "axios": "^1.12.2",
    "hls.js": "^1.6.13",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.9.1",
    "slugify": "^1.6.6",
    "tailwindcss": "^4.1.13"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.jsx">
import { Routes, Route } from 'react-router-dom';
import Home from "./pages/Home";
import DetailsPage from './pages/DetailsPage';

function App() {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      {/* The parameter is now named 'slug' instead of 'id' */}
      <Route path="/:type/:slug" element={<DetailsPage />} />
    </Routes>
  );
}

export default App;
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/Header.jsx">
import React from 'react';
import { FaSearch, FaBell } from 'react-icons/fa';

function Header() {
  return (
    <header className="fixed top-0 left-0 w-full z-50 transition-colors duration-300 bg-black/50 backdrop-blur-md">
      <div className="container mx-auto px-6 py-4 flex justify-between items-center">
        <div className="flex items-center gap-8">
          <h1 className="text-2xl font-bold text-red-600">DOTFLIX</h1>
          <nav className="hidden md:flex items-center gap-6">
            <a href="#" className="text-white hover:text-gray-300">Movies</a>
            <a href="#" className="text-white hover:text-gray-300">Shows</a>
            <a href="#" className="text-white hover:text-gray-300">Streaming</a>
            <a href="#" className="text-white hover:text-gray-300">Discover</a>
          </nav>
        </div>
        <div className="flex items-center gap-6">
          <FaSearch className="text-white cursor-pointer" />
          <FaBell className="text-white cursor-pointer" />
          <button className="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded">
            Login
          </button>
        </div>
      </div>
    </header>
  );
}

export default Header;
</file>

<file path="src/components/Hero.jsx">
import React, { useState, useEffect } from 'react';
import { getTrendingMedia } from '../services/tmbdApi';
import { Link } from 'react-router-dom';
import { createSlug } from '../utils/slug';
import { FaPlay, FaInfoCircle } from 'react-icons/fa';

function Hero() {
  const [trending, setTrending] = useState([]);
  const [currentItem, setCurrentItem] = useState(null);

  useEffect(() => {
    const fetchTrending = async () => {
      const data = await getTrendingMedia();
      if (data?.results) {
        const filtered = data.results.filter(item => item.backdrop_path && item.poster_path);
        setTrending(filtered);
        setCurrentItem(filtered[0]);
      }
    };
    fetchTrending();
  }, []);

  if (!currentItem) {
    return <div className="h-screen w-full flex items-center justify-center bg-black"></div>;
  }

  const backdropUrl = `https://image.tmdb.org/t/p/original${currentItem.backdrop_path}`;
  const posterUrl = `https://image.tmdb.org/t/p/w500${currentItem.poster_path}`;
  const title = currentItem.title || currentItem.name;
  const slug = createSlug(currentItem.id, title);

  return (
    <div className="relative h-screen w-full">
      <div
        className="absolute inset-0 bg-cover bg-center transition-all duration-500"
        style={{ backgroundImage: `url(${backdropUrl})` }}
      >
        <div className="absolute inset-0 bg-black/60 bg-gradient-to-r from-black/90 via-black/50 to-transparent" />
      </div>
      <div className="relative z-10 flex h-full items-center px-6 md:px-12 lg:px-24">
        <div className="flex flex-col md:flex-row items-center gap-8 text-white w-full">
          <div className="md:w-2/3 lg:w-1/2 space-y-4">
            <h1 className="text-4xl md:text-6xl font-bold">{title}</h1>
            <p className="text-gray-300 text-sm md:text-base max-w-2xl">
              {currentItem.overview}
            </p>
            <div className="flex items-center gap-4 pt-4">
              <Link
                to={`/${currentItem.media_type}/${slug}`}
                className="flex items-center gap-2 px-6 py-3 bg-white text-black font-semibold rounded-md hover:bg-gray-200 transition"
              >
                <FaPlay /> Watch Now
              </Link>
              <Link
                to={`/${currentItem.media_type}/${slug}`}
                className="flex items-center gap-2 px-6 py-3 bg-gray-500/70 text-white font-semibold rounded-md hover:bg-gray-500/90 transition"
              >
                <FaInfoCircle /> More Info
              </Link>
            </div>
          </div>
          <div className="hidden md:block md:w-1/3 lg:w-1/2 flex justify-center">
            <img src={posterUrl} alt={title} className="rounded-lg shadow-2xl w-64" />
          </div>
        </div>
      </div>
    </div>
  );
}

export default Hero;
</file>

<file path="src/components/Loader.jsx">
import React from 'react';

function Loader() {
  return (
    <div className="flex justify-center items-center p-8">
      <div className="w-16 h-16 border-4 border-dashed rounded-full animate-spin border-blue-500"></div>
    </div>
  );
}

export default Loader;
</file>

<file path="src/components/MovieDetails.jsx">
import React from "react";

function MovieDetails({ movie, onWatch, loading }) {
  const embedUrl = `https://www.vidking.net/embed/movie/${movie.id}?color=e50914&autoPlay=true`;

  return (
    <>
      <div className="flex flex-col md:flex-row gap-6 mb-6">
        {movie.poster_path && (
          <img
            src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}
            alt={movie.title}
            className="rounded-lg shadow-lg w-full md:w-auto"
          />
        )}
        <div>
          <h1 className="text-3xl font-bold">{movie.title}</h1>
          <p className="text-gray-400 mt-2">{movie.tagline}</p>
          <p className="text-gray-300 mt-4 leading-relaxed">{movie.overview}</p>
        </div>
      </div>
      <button
        onClick={() => onWatch(embedUrl)}
        className="px-6 py-3 bg-gradient-to-r from-red-600 to-orange-500 hover:opacity-90 rounded-lg text-white font-semibold shadow-lg"
        disabled={loading}
      >
        {loading ? "Loading..." : "▶ Watch Movie"}
      </button>
    </>
  );
}

export default MovieDetails;
</file>

<file path="src/components/ResultsGrid.jsx">
import React from "react";
import { Link } from "react-router-dom";
import { createSlug } from "../utils/slug"; // Import the utility

function ResultsGrid({ results }) {
  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Results</h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-6">
        {results.map((r) => (
          // Use the createSlug function to generate the URL
          <Link to={`/${r.media_type}/${createSlug(r.id, r.title || r.name)}`} key={r.id}>
            <div
              className="relative bg-gray-800/40 rounded-lg overflow-hidden shadow-lg hover:scale-105 transition transform cursor-pointer"
            >
              {/* ... rest of the component is the same */}
              {r.poster_path ? (
                <img
                  src={`https://image.tmdb.org/t/p/w300${r.poster_path}`}
                  alt={r.title || r.name}
                  className="w-full h-64 object-cover"
                />
              ) : (
                <div className="w-full h-64 bg-gray-700 flex items-center justify-center text-gray-400 text-xs">
                  No Image
                </div>
              )}
              <div className="absolute bottom-0 w-full bg-black/60 p-2 text-sm">
                <h3 className="font-semibold truncate">{r.title || r.name}</h3>
                <p className="text-gray-300 text-xs">{r.media_type}</p>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
}

export default ResultsGrid;
</file>

<file path="src/components/SearchBar.jsx">
import React, { useState } from "react";

function SearchBar({ onSearch, loading }) {
  const [query, setQuery] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!query.trim()) return;
    onSearch(query);
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="mb-8 flex items-center gap-3 max-w-2xl mx-auto"
    >
      <input
        type="text"
        value={query}
        placeholder="🔍 Search for movies, TV shows, or episodes..."
        onChange={(e) => setQuery(e.target.value)}
        className="flex-1 p-3 rounded-lg bg-gray-800/70 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
        disabled={loading}
      />
      <button
        type="submit"
        className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold disabled:bg-gray-500"
        disabled={loading}
      >
        Search
      </button>
    </form>
  );
}

export default SearchBar;
</file>

<file path="src/components/TVShowDetails.jsx">
import React, { useState } from "react";
import { getSeasonDetails } from "../services/tmbdApi";

function TVShowDetails({ show, onWatch, loading }) {
  const [episodesBySeason, setEpisodesBySeason] = useState({});
  const [selectedEpisode, setSelectedEpisode] = useState(null);
  const [openSeasons, setOpenSeasons] = useState([]);

  async function fetchSeason(seasonNumber) {
    if (episodesBySeason[seasonNumber]) return;
    const data = await getSeasonDetails(show.id, seasonNumber);
    if (data && data.episodes) {
      setEpisodesBySeason((prev) => ({ ...prev, [seasonNumber]: data.episodes }));
    }
  }

  function toggleSeason(seasonNumber) {
    if (openSeasons.includes(seasonNumber)) {
      setOpenSeasons(openSeasons.filter((s) => s !== seasonNumber));
    } else {
      setOpenSeasons([...openSeasons, seasonNumber]);
      fetchSeason(seasonNumber);
    }
  }
  
  const handleWatchEpisode = () => {
    if (!selectedEpisode) return;
    const embedUrl = `https://www.vidking.net/embed/tv/${show.id}/${selectedEpisode.season}/${selectedEpisode.episode_number}?color=e50914&autoPlay=true&nextEpisode=true&episodeSelector=true`;
    onWatch(embedUrl);
  };

  return (
    <>
      <div className="flex flex-col md:flex-row gap-6 mb-6">
        {show.poster_path && (
          <img
            src={`https://image.tmdb.org/t/p/w300${show.poster_path}`}
            alt={show.name}
            className="rounded-lg shadow-lg"
          />
        )}
        <div>
          <h1 className="text-3xl font-bold">{show.name}</h1>
          <p className="text-gray-400 mt-2">{show.tagline}</p>
          <p className="text-gray-300 mt-4 leading-relaxed">{show.overview}</p>
        </div>
      </div>

      <div>
        {show.seasons
          .filter((s) => s.season_number > 0)
          .map((season) => (
            <div key={season.id} className="mb-10">
              <h2
                className="text-2xl font-semibold mb-3 cursor-pointer flex justify-between items-center bg-gray-800/70 px-4 py-3 rounded-lg hover:bg-gray-700"
                onClick={() => toggleSeason(season.season_number)}
              >
                {season.name} ({season.episode_count} episodes)
                <span className="text-gray-400">
                  {openSeasons.includes(season.season_number) ? "▲" : "▼"}
                </span>
              </h2>

              {openSeasons.includes(season.season_number) && (
                <>
                  <div className="overflow-x-auto">
                    <div className="flex gap-4 pb-4">
                      {episodesBySeason[season.season_number]?.map((ep) => (
                        <div
                          key={ep.id}
                          className={`min-w-[220px] bg-gray-800/60 rounded-lg shadow hover:scale-105 transition transform cursor-pointer ${
                            selectedEpisode?.id === ep.id ? "ring-2 ring-blue-500" : ""
                          }`}
                          onClick={() => setSelectedEpisode({ ...ep, season: season.season_number })}
                        >
                          {ep.still_path ? (
                            <img src={`https://image.tmdb.org/t/p/w300${ep.still_path}`} alt={ep.name} className="rounded-t-lg h-36 w-full object-cover" />
                          ) : (
                            <div className="h-36 flex items-center justify-center bg-gray-700 text-gray-400 text-xs rounded-t-lg">No Image</div>
                          )}
                          <div className="p-3">
                            <h3 className="font-semibold text-sm truncate">E{ep.episode_number}: {ep.name}</h3>
                            <p className="text-gray-400 text-xs">{ep.air_date}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {selectedEpisode?.season === season.season_number && (
                    <div className="mt-6 bg-gray-800/70 rounded-lg p-6 shadow-lg">
                      <h2 className="text-xl font-bold mb-3">S{selectedEpisode.season} · E{selectedEpisode.episode_number} — {selectedEpisode.name}</h2>
                      <p className="text-gray-300 mb-6 leading-relaxed">{selectedEpisode.overview}</p>
                      <button
                        onClick={handleWatchEpisode}
                        className="px-6 py-3 bg-gradient-to-r from-red-600 to-orange-500 hover:opacity-90 rounded-lg text-white font-semibold shadow-lg"
                        disabled={loading}
                      >
                        {loading ? "Loading..." : "▶ Watch Episode"}
                      </button>
                    </div>
                  )}
                </>
              )}
            </div>
          ))}
      </div>
    </>
  );
}

export default TVShowDetails;
</file>

<file path="src/components/VideoPlayer.jsx">
import React, { useEffect, useRef } from "react";
import Hls from "hls.js";

function VideoPlayer({ src }) {
  const videoRef = useRef(null);

  useEffect(() => {
    if (!src) return;

    const video = videoRef.current;
    if (Hls.isSupported()) {
      const hls = new Hls();
      hls.loadSource(src);
      hls.attachMedia(video);
    } else if (video.canPlayType("application/vnd.apple.mpegurl")) {
      video.src = src;
    }
  }, [src]);

  return (
    <div className="mt-8">
      <video
        ref={videoRef}
        id="video-player"
        controls
        autoPlay
        style={{ width: "100%", maxHeight: "500px", background: "#000" }}
      />
    </div>
  );
}

export default VideoPlayer;
</file>

<file path="src/index.css">
@import "tailwindcss";

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #121212;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
    background-color: #121212;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom' // Import BrowserRouter
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter> {/* Wrap your App component */}
      <App />
    </BrowserRouter>
  </StrictMode>,
)
</file>

<file path="src/pages/DetailsPage.jsx">
// src/pages/DetailsPage.jsx
import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { getMediaDetails } from "../services/tmbdApi";
import { sniffStream } from "../services/streamApi";
import MovieDetails from "../components/MovieDetails";
import TVShowDetails from "../components/TVShowDetails";
import VideoPlayer from "../components/VideoPlayer";
import Loader from "../components/Loader";
import { getIdFromSlug } from "../utils/slug"; // Import the utility

function DetailsPage() {
  const { type, slug } = useParams(); // Get the 'slug' from the URL
  const [details, setDetails] = useState(null);
  const [videoUrl, setVideoUrl] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDetails = async () => {
      const id = getIdFromSlug(slug); // Extract the ID from the slug
      if (!id) return; // Handle cases where the slug might be invalid

      setLoading(true);
      const data = await getMediaDetails(type, id);
      setDetails({ ...data, type });
      setLoading(false);
    };

    fetchDetails();
  }, [type, slug]);

  const handleWatch = async (embedUrl) => {
    setLoading(true);
    setVideoUrl(null);
    setError(null);
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 20000);

    try {
      const streamUrl = await sniffStream(embedUrl, controller.signal);
      if (streamUrl) {
        setVideoUrl(streamUrl);
      } else {
        alert("Stream not found");
      }
    } catch (err) {
      alert(err.message);
    } finally {
      clearTimeout(timeout);
      setLoading(false);
    }
  };

  if (loading && !details) {
    return <Loader />;
  }

  if (!details) {
    return <p>No details found.</p>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-black text-white p-6">
      <Link
        to="/"
        className="mb-6 inline-block text-sm text-gray-300 hover:underline"
      >
        ← Back to Search
      </Link>

      {details.type === "movie" && (
        <MovieDetails movie={details} onWatch={handleWatch} loading={loading} />
      )}

      {details.type === "tv" && (
        <TVShowDetails show={details} onWatch={handleWatch} loading={loading} />
      )}

      {videoUrl && <VideoPlayer src={videoUrl} />}
    </div>
  );
}

export default DetailsPage;
</file>

<file path="src/pages/Home.jsx">
import React, { useState } from "react";
import SearchBar from "../components/SearchBar";
import ResultsGrid from "../components/ResultsGrid";
import { searchMedia } from "../services/tmbdApi";
import Loader from "../components/Loader";
import Header from "../components/Header";
import Hero from "../components/Hero";

function Home() {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  const handleSearch = async (query) => {
    setLoading(true);
    setResults([]);
    const data = await searchMedia(query);
    setResults(data?.results || []);
    setLoading(false);
  };

  return (
    <div className="bg-black text-white">
      <Header />
      <Hero />
      <div className="p-6">
        <SearchBar onSearch={handleSearch} loading={loading} />

        {loading && <Loader />}

        {results.length > 0 && <ResultsGrid results={results} />}
      </div>
    </div>
  );
}

export default Home;
</file>

<file path="src/services/streamApi.js">
const STREAM_SERVER_URL = "http://192.168.18.108:5000/geturl";

export async function sniffStream(embedUrl, signal) {
  try {
    const res = await fetch(STREAM_SERVER_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ url: embedUrl }),
      signal,
    });

    if (!res.ok) {
      throw new Error("Server error while fetching stream.");
    }

    const data = await res.json();
    return data.streamUrl;
  } catch (err) {
    if (err.name === "AbortError") {
      throw new Error(
        "⚠️ Server is restarting. Please wait 1 minute and try again."
      );
    }
    throw new Error(`❌ Failed to fetch stream: ${err.message}`);
  }
}
</file>

<file path="src/services/tmbdApi.js">
const API_KEY = "ad301b7cc82ffe19273e55e4d4206885";
const BASE_URL = "https://api.themoviedb.org/3";

async function fetchFromTMDb(endpoint) {
  const url = `${BASE_URL}/${endpoint}`;
  try {
    const res = await fetch(url);
    if (!res.ok) {
      console.error(`Failed to fetch from TMDb: ${res.statusText}`);
      return null;
    }
    return await res.json();
  } catch (err) {
    console.error("Error in fetchFromTMDb:", err);
    return null;
  }
}

export const searchMedia = (query) => {
  return fetchFromTMDb(
    `search/multi?api_key=${API_KEY}&query=${encodeURIComponent(
      query
    )}&language=en-US`
  );
};

export const getMediaDetails = (type, id) => {
  return fetchFromTMDb(`${type}/${id}?api_key=${API_KEY}&language=en-US`);
};

export const getSeasonDetails = (tvId, seasonNumber) => {
  return fetchFromTMDb(
    `tv/${tvId}/season/${seasonNumber}?api_key=${API_KEY}&language=en-US`
  );
};

export const getTrendingMedia = () => {
  return fetchFromTMDb(`trending/all/day?api_key=${API_KEY}&language=en-US`);
};
</file>

<file path="src/utils/encoder.js">
export const encodeId = (id) => {
  return btoa(id.toString())
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=/g, "");
};

// Decodes a URL-safe Base64 string back to its original value
export const decodeId = (encodedId) => {
  try {
    // Add padding back if necessary
    let base64 = encodedId.replace(/-/g, "+").replace(/_/g, "/");
    while (base64.length % 4) {
      base64 += "=";
    }
    return atob(base64);
  } catch (e) {
    console.error("Failed to decode ID:", e);
    return null;
  }
};
</file>

<file path="src/utils/slug.js">
// src/utils/slug.js
import slugify from 'slugify';

export const createSlug = (id, title) => {
  if (!id || !title) return '';

  const slugTitle = slugify(title, {
    lower: true,      // convert to lower case
    strict: true,     // strip special characters
    remove: /[*+~.()'"!:@]/g // remove characters that slugify doesn't handle
  });

  return `${id}-${slugTitle}`;
};

export const getIdFromSlug = (slug) => {
  if (!slug) return '';
  return slug.split('-')[0];
};
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})
</file>

</files>
