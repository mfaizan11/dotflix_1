This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
README.md
src/App.jsx
src/components/Header.jsx
src/components/Hero.jsx
src/components/Loader.jsx
src/components/MediaRow.jsx
src/components/MovieDetails.jsx
src/components/RatingBadge.jsx
src/components/ResultsGrid.jsx
src/components/SearchBar.jsx
src/components/TVShowDetails.jsx
src/components/VideoPlayer.jsx
src/index.css
src/layouts/MainLayout.jsx
src/main.jsx
src/pages/DetailsPage.jsx
src/pages/Home.jsx
src/pages/SearchPage.jsx
src/services/streamApi.js
src/services/tmbdApi.js
src/utils/encoder.js
src/utils/slug.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/components/Loader.jsx">
import React from 'react';

function Loader() {
  return (
    <div className="flex justify-center items-center p-8">
      <div className="w-16 h-16 border-4 border-dashed rounded-full animate-spin border-blue-500"></div>
    </div>
  );
}

export default Loader;
</file>

<file path="src/components/MediaRow.jsx">
import React, { useState, useEffect, useRef, useCallback, memo } from "react";
import { Link } from "react-router-dom";
import { createSlug } from "../utils/slug";
import Loader from "./Loader";
import RatingBadge from "./RatingBadge";

// Memoized MediaItem component to prevent unnecessary re-renders
const MediaItem = memo(({ item, media_type }) => {
  const handleImageError = (e) => {
    e.target.style.display = "none";
    e.target.nextSibling.style.display = "flex";
  };

  return (
    <Link
      to={`/${item.media_type || media_type}/${createSlug(
        item.id,
        item.title || item.name
      )}`}
      className="flex-shrink-0 w-48"
      draggable={false}
    >
      <div className="bg-gray-800/40 rounded-lg overflow-hidden shadow-lg hover:scale-105 transition transform duration-300 cursor-pointer group">
        <div className="relative">
          {item.poster_path ? (
            <>
              <img
                src={`https://image.tmdb.org/t/p/w300${item.poster_path}`}
                alt={item.title || item.name}
                className="w-full h-64 object-cover"
                loading="lazy"
                onError={handleImageError}
                draggable={false}
              />
              <div className="w-full h-64 bg-gray-700 items-center justify-center text-gray-400 text-xs hidden">
                No Image
              </div>
            </>
          ) : (
            <div className="w-full h-64 bg-gray-700 flex items-center justify-center text-gray-400 text-xs">
              No Image
            </div>
          )}
          <RatingBadge rating={item.vote_average} />
        </div>
        <div className="p-3">
          <h3 className="font-semibold truncate text-sm text-white hover:text-red-400 transition-colors">
            {item.title || item.name}
          </h3>
        </div>
      </div>
    </Link>
  );
});

MediaItem.displayName = "MediaItem";

function MediaRow({ title, fetchData, media_type }) {
  const [media, setMedia] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isDragging, setIsDragging] = useState(false);
  const scrollContainerRef = useRef(null);
  const dragStartRef = useRef({ x: 0, scrollLeft: 0 });

  // Memoized fetch function to prevent unnecessary re-renders
  const loadMedia = useCallback(async () => {
    setLoading(true);
    try {
      const data = await fetchData();
      if (data?.results) {
        setMedia(data.results.slice(0, 10));
      }
    } catch (error) {
      console.error("Error loading media:", error);
      setMedia([]);
    } finally {
      setLoading(false);
    }
  }, [fetchData]);

  useEffect(() => {
    loadMedia();
  }, [loadMedia]);

  // Mouse drag handlers
  const handleMouseDown = useCallback((e) => {
    if (!scrollContainerRef.current) return;

    setIsDragging(true);
    dragStartRef.current = {
      x: e.pageX - scrollContainerRef.current.offsetLeft,
      scrollLeft: scrollContainerRef.current.scrollLeft,
    };

    // Prevent text selection during drag
    document.body.style.userSelect = "none";
  }, []);

  const handleMouseMove = useCallback(
    (e) => {
      if (!isDragging || !scrollContainerRef.current) return;

      e.preventDefault();
      const x = e.pageX - scrollContainerRef.current.offsetLeft;
      const walk = (x - dragStartRef.current.x) * 2;
      scrollContainerRef.current.scrollLeft =
        dragStartRef.current.scrollLeft - walk;
    },
    [isDragging]
  );

  const handleMouseUp = useCallback(() => {
    setIsDragging(false);
    document.body.style.userSelect = "";
  }, []);

  const handleMouseLeave = useCallback(() => {
    setIsDragging(false);
    document.body.style.userSelect = "";
  }, []);

  // Touch drag handlers for mobile
  const handleTouchStart = useCallback((e) => {
    if (!scrollContainerRef.current) return;

    setIsDragging(true);
    dragStartRef.current = {
      x: e.touches[0].pageX - scrollContainerRef.current.offsetLeft,
      scrollLeft: scrollContainerRef.current.scrollLeft,
    };
  }, []);

  const handleTouchMove = useCallback(
    (e) => {
      if (!isDragging || !scrollContainerRef.current) return;

      const x = e.touches[0].pageX - scrollContainerRef.current.offsetLeft;
      const walk = (x - dragStartRef.current.x) * 1.5;
      scrollContainerRef.current.scrollLeft =
        dragStartRef.current.scrollLeft - walk;
    },
    [isDragging]
  );

  const handleTouchEnd = useCallback(() => {
    setIsDragging(false);
  }, []);

  // Scroll buttons
  const scrollLeft = useCallback(() => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: -400,
        behavior: "smooth",
      });
    }
  }, []);

  const scrollRight = useCallback(() => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: 400,
        behavior: "smooth",
      });
    }
  }, []);

  // Don't render the row if there's an error or no media
  if (!loading && media.length === 0) {
    return null;
  }

  return (
    <div className="mb-12 transition-opacity duration-500 ease-in-out opacity-100">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-bold text-white">{title}</h2>

        {/* Scroll buttons - only show if not loading and has media */}
        {!loading && media.length > 0 && (
          <div className="hidden md:flex space-x-2">
            <button
              onClick={scrollLeft}
              className="p-2 bg-gray-800/60 hover:bg-gray-700/60 rounded-full text-white transition-colors"
              aria-label="Scroll left"
            >
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M15 19l-7-7 7-7"
                />
              </svg>
            </button>
            <button
              onClick={scrollRight}
              className="p-2 bg-gray-800/60 hover:bg-gray-700/60 rounded-full text-white transition-colors"
              aria-label="Scroll right"
            >
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </button>
          </div>
        )}
      </div>

      {loading ? (
        <Loader />
      ) : (
        <div className="relative group">
          <div
            ref={scrollContainerRef}
            className={`flex overflow-x-auto space-x-4 pb-4 media-row scrollbar-hide ${
              isDragging ? "cursor-grabbing select-none" : "cursor-grab"
            }`}
            style={{
              scrollbarWidth: "none",
              msOverflowStyle: "none",
            }}
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleMouseUp}
            onMouseLeave={handleMouseLeave}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
          >
            {media.map((item) => (
              <MediaItem key={item.id} item={item} media_type={media_type} />
            ))}
          </div>
        </div>
      )}

      <style jsx>{`
        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }
        .media-row {
          -webkit-overflow-scrolling: touch;
        }
      `}</style>
    </div>
  );
}

export default memo(MediaRow);
</file>

<file path="src/components/MovieDetails.jsx">
import React from "react";

function MovieDetails({ movie, onWatch, loading }) {
  const embedUrl = `https://www.vidking.net/embed/movie/${movie.id}?color=e50914&autoPlay=true`;

  return (
    <>
      <div className="flex flex-col md:flex-row gap-6 mb-6">
        {movie.poster_path && (
          <img
            src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}
            alt={movie.title}
            className="rounded-lg shadow-lg w-full md:w-auto"
          />
        )}
        <div>
          <h1 className="text-3xl font-bold">{movie.title}</h1>
          <p className="text-gray-400 mt-2">{movie.tagline}</p>
          <p className="text-gray-300 mt-4 leading-relaxed">{movie.overview}</p>
        </div>
      </div>
      <button
        onClick={() => onWatch(embedUrl)}
        className="px-6 py-3 bg-gradient-to-r from-red-600 to-orange-500 hover:opacity-90 rounded-lg text-white font-semibold shadow-lg"
        disabled={loading}
      >
        {loading ? "Loading..." : "▶ Watch Movie"}
      </button>
    </>
  );
}

export default MovieDetails;
</file>

<file path="src/components/RatingBadge.jsx">
import React from "react";

const RatingBadge = ({ rating }) => {
  // We don't want to show the badge if the rating is 0 or not available
  if (!rating || rating === 0) {
    return null;
  }

  // Format rating to one decimal place, e.g., 7.7
  const ratingFormatted = rating.toFixed(1);

  // SVG circle properties
  const radius = 20;
  const circumference = 2 * Math.PI * radius;
  // Calculate the progress offset
  const offset = circumference - (rating / 10) * circumference;

  // Determine the color of the ring based on the rating value
  const getRingColor = () => {
    if (rating >= 7) return "stroke-green-500"; // Good
    if (rating >= 5) return "stroke-yellow-500"; // Average
    return "stroke-red-500"; // Bad
  };

  return (
    <div
      className="absolute bottom-2 left-2 w-10 h-10 z-10"
      title={`Rating: ${ratingFormatted}`}
    >
      <svg className="w-full h-full" viewBox="0 0 50 50">
        {/* Background of the circle */}
        <circle
          className="stroke-transparent"
          cx="25"
          cy="25"
          r={radius}
          strokeWidth="5"
          fill="rgba(0, 0, 0, 0.8)"
        />
        {/* Progress ring */}
        <circle
          className={`transform -rotate-90 origin-center ${getRingColor()}`}
          cx="25"
          cy="25"
          r={radius}
          strokeWidth="4"
          fill="transparent"
          strokeDasharray={circumference}
          strokeDashoffset={offset}
          strokeLinecap="round"
        />
      </svg>
      {/* Text in the center */}
      <div className="absolute inset-0 flex items-center justify-center text-white font-bold text-xs">
        {ratingFormatted}
      </div>
    </div>
  );
};

export default RatingBadge;
</file>

<file path="src/components/TVShowDetails.jsx">
import React, { useState } from "react";
import { getSeasonDetails } from "../services/tmbdApi";

function TVShowDetails({ show, onWatch, loading }) {
  const [episodesBySeason, setEpisodesBySeason] = useState({});
  const [selectedEpisode, setSelectedEpisode] = useState(null);
  const [openSeasons, setOpenSeasons] = useState([]);

  async function fetchSeason(seasonNumber) {
    if (episodesBySeason[seasonNumber]) return;
    const data = await getSeasonDetails(show.id, seasonNumber);
    if (data && data.episodes) {
      setEpisodesBySeason((prev) => ({ ...prev, [seasonNumber]: data.episodes }));
    }
  }

  function toggleSeason(seasonNumber) {
    if (openSeasons.includes(seasonNumber)) {
      setOpenSeasons(openSeasons.filter((s) => s !== seasonNumber));
    } else {
      setOpenSeasons([...openSeasons, seasonNumber]);
      fetchSeason(seasonNumber);
    }
  }
  
  const handleWatchEpisode = () => {
    if (!selectedEpisode) return;
    const embedUrl = `https://www.vidking.net/embed/tv/${show.id}/${selectedEpisode.season}/${selectedEpisode.episode_number}?color=e50914&autoPlay=true&nextEpisode=true&episodeSelector=true`;
    onWatch(embedUrl);
  };

  return (
    <>
      <div className="flex flex-col md:flex-row gap-6 mb-6">
        {show.poster_path && (
          <img
            src={`https://image.tmdb.org/t/p/w300${show.poster_path}`}
            alt={show.name}
            className="rounded-lg shadow-lg"
          />
        )}
        <div>
          <h1 className="text-3xl font-bold">{show.name}</h1>
          <p className="text-gray-400 mt-2">{show.tagline}</p>
          <p className="text-gray-300 mt-4 leading-relaxed">{show.overview}</p>
        </div>
      </div>

      <div>
        {show.seasons
          .filter((s) => s.season_number > 0)
          .map((season) => (
            <div key={season.id} className="mb-10">
              <h2
                className="text-2xl font-semibold mb-3 cursor-pointer flex justify-between items-center bg-gray-800/70 px-4 py-3 rounded-lg hover:bg-gray-700"
                onClick={() => toggleSeason(season.season_number)}
              >
                {season.name} ({season.episode_count} episodes)
                <span className="text-gray-400">
                  {openSeasons.includes(season.season_number) ? "▲" : "▼"}
                </span>
              </h2>

              {openSeasons.includes(season.season_number) && (
                <>
                  <div className="overflow-x-auto">
                    <div className="flex gap-4 pb-4">
                      {episodesBySeason[season.season_number]?.map((ep) => (
                        <div
                          key={ep.id}
                          className={`min-w-[220px] bg-gray-800/60 rounded-lg shadow hover:scale-105 transition transform cursor-pointer ${
                            selectedEpisode?.id === ep.id ? "ring-2 ring-blue-500" : ""
                          }`}
                          onClick={() => setSelectedEpisode({ ...ep, season: season.season_number })}
                        >
                          {ep.still_path ? (
                            <img src={`https://image.tmdb.org/t/p/w300${ep.still_path}`} alt={ep.name} className="rounded-t-lg h-36 w-full object-cover" />
                          ) : (
                            <div className="h-36 flex items-center justify-center bg-gray-700 text-gray-400 text-xs rounded-t-lg">No Image</div>
                          )}
                          <div className="p-3">
                            <h3 className="font-semibold text-sm truncate">E{ep.episode_number}: {ep.name}</h3>
                            <p className="text-gray-400 text-xs">{ep.air_date}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {selectedEpisode?.season === season.season_number && (
                    <div className="mt-6 bg-gray-800/70 rounded-lg p-6 shadow-lg">
                      <h2 className="text-xl font-bold mb-3">S{selectedEpisode.season} · E{selectedEpisode.episode_number} — {selectedEpisode.name}</h2>
                      <p className="text-gray-300 mb-6 leading-relaxed">{selectedEpisode.overview}</p>
                      <button
                        onClick={handleWatchEpisode}
                        className="px-6 py-3 bg-gradient-to-r from-red-600 to-orange-500 hover:opacity-90 rounded-lg text-white font-semibold shadow-lg"
                        disabled={loading}
                      >
                        {loading ? "Loading..." : "▶ Watch Episode"}
                      </button>
                    </div>
                  )}
                </>
              )}
            </div>
          ))}
      </div>
    </>
  );
}

export default TVShowDetails;
</file>

<file path="src/components/VideoPlayer.jsx">
import React, { useEffect, useRef } from "react";
import Hls from "hls.js";

function VideoPlayer({ src }) {
  const videoRef = useRef(null);

  useEffect(() => {
    if (!src) return;

    const video = videoRef.current;
    if (Hls.isSupported()) {
      const hls = new Hls();
      hls.loadSource(src);
      hls.attachMedia(video);
    } else if (video.canPlayType("application/vnd.apple.mpegurl")) {
      video.src = src;
    }
  }, [src]);

  return (
    <div className="mt-8">
      <video
        ref={videoRef}
        id="video-player"
        controls
        autoPlay
        style={{ width: "100%", maxHeight: "500px", background: "#000" }}
      />
    </div>
  );
}

export default VideoPlayer;
</file>

<file path="src/layouts/MainLayout.jsx">
import React from "react";
import { Outlet } from "react-router-dom";
import Header from "../components/Header";

function MainLayout() {
  return (
    <>
      <Header />
      <main>
        <Outlet />
      </main>
    </>
  );
}

export default MainLayout;
</file>

<file path="src/pages/SearchPage.jsx">
import React, { useState, useEffect } from "react";
import { useSearchParams } from "react-router-dom";
import ResultsGrid from "../components/ResultsGrid";
import { searchMedia } from "../services/tmbdApi";
import Loader from "../components/Loader";

function SearchPage() {
  const [searchParams] = useSearchParams();
  const query = searchParams.get("q");
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!query) return;

    const handleSearch = async () => {
      setLoading(true);
      setResults([]);
      const data = await searchMedia(query);
      setResults(data?.results || []);
      setLoading(false);
    };

    handleSearch();
  }, [query]);

  return (
    <div className="pt-24 p-6 md:p-30 bg-black min-h-screen text-white">
      <h1 className="text-2xl font-bold mb-6">Search results for: "{query}"</h1>
      {loading && <Loader />}
      {results.length > 0 ? (
        <ResultsGrid results={results} />
      ) : (
        !loading && <p>No results found.</p>
      )}
    </div>
  );
}

export default SearchPage;
</file>

<file path="src/utils/encoder.js">
export const encodeId = (id) => {
  return btoa(id.toString())
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=/g, "");
};

// Decodes a URL-safe Base64 string back to its original value
export const decodeId = (encodedId) => {
  try {
    // Add padding back if necessary
    let base64 = encodedId.replace(/-/g, "+").replace(/_/g, "/");
    while (base64.length % 4) {
      base64 += "=";
    }
    return atob(base64);
  } catch (e) {
    console.error("Failed to decode ID:", e);
    return null;
  }
};
</file>

<file path="src/utils/slug.js">
// src/utils/slug.js
import slugify from 'slugify';

export const createSlug = (id, title) => {
  if (!id || !title) return '';

  const slugTitle = slugify(title, {
    lower: true,      // convert to lower case
    strict: true,     // strip special characters
    remove: /[*+~.()'"!:@]/g // remove characters that slugify doesn't handle
  });

  return `${id}-${slugTitle}`;
};

export const getIdFromSlug = (slug) => {
  if (!slug) return '';
  return slug.split('-')[0];
};
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})
</file>

<file path="src/App.jsx">
import React, { Suspense, lazy } from "react";
import { Routes, Route } from "react-router-dom";
import Home from "./pages/Home";
import Loader from "./components/Loader";
import MainLayout from "./layouts/MainLayout";

// Lazy load the pages for faster initial load time
const DetailsPage = lazy(() => import("./pages/DetailsPage"));
const SearchPage = lazy(() => import("./pages/SearchPage"));

function App() {
  return (
    <Suspense
      fallback={
        <div className="h-screen w-full flex items-center justify-center bg-black">
          <Loader />
        </div>
      }
    >
      <Routes>
        <Route element={<MainLayout />}>
          <Route path="/" element={<Home />} />
          <Route path="/:type/:slug" element={<DetailsPage />} />
          <Route path="/search" element={<SearchPage />} />
        </Route>
      </Routes>
    </Suspense>
  );
}

export default App;
</file>

<file path="src/components/Header.jsx">
import React, { useState } from "react";
import { FaSearch, FaBars, FaTimes } from "react-icons/fa";
import { Link, useNavigate } from "react-router-dom";
import SearchBar from "./SearchBar";
import { SiViaplay } from "react-icons/si";

function Header() {
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const navigate = useNavigate();

  const handleSearch = (query) => {
    setIsSearchOpen(false);
    navigate(`/search?q=${encodeURIComponent(query)}`);
  };

  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
    // Close search when opening mobile menu
    if (!isMobileMenuOpen) {
      setIsSearchOpen(false);
    }
  };

  const toggleSearch = () => {
    setIsSearchOpen(!isSearchOpen);
    // Close mobile menu when opening search
    if (!isSearchOpen) {
      setIsMobileMenuOpen(false);
    }
  };

  return (
    <nav className="flex mx-auto justify-center items-center">
      <header className="fixed top-4 w-full z-50 transition-colors duration-300 max-w-7xl rounded-md border bg-transparent backdrop-blur-md px-4">
        <div className="container mx-auto px-4 sm:px-6 py-4 flex justify-between items-center">
          {/* Logo */}
          <Link
            to="/"
            className="text-2xl sm:text-3xl font-bold !text-white flex flex-row gap-4"
          >
            <strong>DotfLix</strong>
            <SiViaplay className="mt-1" />
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center gap-6 text-sm font-semibold">
            <a href="#" className="text-white hover:text-gray-300">
              Movies
            </a>
            <a href="#" className="text-white hover:text-gray-300">
              Shows
            </a>
          </nav>

          {/* Desktop Actions */}
          <div className="hidden md:flex items-center gap-4">
            <FaSearch
              className="text-white cursor-pointer h-5 w-5 hover:text-gray-300"
              onClick={toggleSearch}
            />
            <button className="bg-black/50 border border-white/20 text-white font-semibold py-2 px-5 rounded-lg text-sm hover:bg-black/70 transition-colors">
              Login
            </button>
          </div>

          {/* Mobile Actions */}
          <div className="flex md:hidden items-center gap-3">
            <FaSearch
              className="text-white cursor-pointer h-5 w-5 hover:text-gray-300"
              onClick={toggleSearch}
            />
            <button
              onClick={toggleMobileMenu}
              className="text-white hover:text-gray-300"
            >
              {isMobileMenuOpen ? (
                <FaTimes className="h-6 w-6" />
              ) : (
                <FaBars className="h-6 w-6" />
              )}
            </button>
          </div>
        </div>

        {/* Search Bar */}
        {isSearchOpen && (
          <div className="absolute top-full left-0 w-full bg-black/90 backdrop-blur-md rounded-b-lg p-4 border-t border-white/10">
            <SearchBar onSearch={handleSearch} />
          </div>
        )}

        {/* Mobile Menu */}
        {isMobileMenuOpen && (
          <div className="md:hidden absolute top-full left-0 w-full bg-black/90 backdrop-blur-md rounded-b-lg border-t border-white/10">
            <nav className="flex flex-col p-4 space-y-4">
              <a
                href="#"
                className="text-white hover:text-gray-300 text-lg font-semibold py-2"
              >
                Movies
              </a>
              <a
                href="#"
                className="text-white hover:text-gray-300 text-lg font-semibold py-2"
              >
                Shows
              </a>
              <div className="pt-4 border-t border-white/10">
                <button className="w-full bg-black/50 border border-white/20 text-white font-semibold py-3 px-5 rounded-lg hover:bg-black/70 transition-colors">
                  Login
                </button>
              </div>
            </nav>
          </div>
        )}
      </header>
    </nav>
  );
}

export default Header;
</file>

<file path="src/components/SearchBar.jsx">
import React, { useState } from "react";

function SearchBar({ onSearch, loading }) {
  const [query, setQuery] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!query.trim()) return;
    onSearch(query);
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="flex items-center gap-3 w-full max-w-4xl mx-auto"
    >
      <input
        type="text"
        value={query}
        placeholder="🔍 Search for movies, TV shows..."
        onChange={(e) => setQuery(e.target.value)}
        className="flex-1 p-3 rounded-lg bg-gray-800/70 text-white focus:outline-none focus:ring-2 focus:ring-red-500"
        disabled={loading}
        autoFocus
      />
      <button
        type="submit"
        className="px-6 py-3 bg-red-600 hover:bg-red-700 rounded-lg font-semibold disabled:bg-gray-500"
        disabled={loading}
      >
        Search
      </button>
    </form>
  );
}

export default SearchBar;
</file>

<file path="src/main.jsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter } from "react-router-dom"; 
import "./index.css";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>
);
</file>

<file path="src/pages/DetailsPage.jsx">
import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { getMediaDetails } from "../services/tmbdApi";
import { sniffStream } from "../services/streamApi";
import MovieDetails from "../components/MovieDetails";
import TVShowDetails from "../components/TVShowDetails";
import VideoPlayer from "../components/VideoPlayer";
import Loader from "../components/Loader";
import { getIdFromSlug } from "../utils/slug"; 

function DetailsPage() {
  const { type, slug } = useParams(); 
  const [details, setDetails] = useState(null);
  const [videoUrl, setVideoUrl] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDetails = async () => {
      const id = getIdFromSlug(slug); 
      if (!id) return;
      setLoading(true);
      const data = await getMediaDetails(type, id);
      setDetails({ ...data, type });
      setLoading(false);
    };
    fetchDetails();
  }, [type, slug]);

  const handleWatch = async (embedUrl) => {
    setLoading(true);
    setVideoUrl(null);
    setError(null);
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 20000);
    try {
      const streamUrl = await sniffStream(embedUrl, controller.signal);
      if (streamUrl) {
        setVideoUrl(streamUrl);
      } else {
        alert("Stream not found");
      }
    } catch (err) {
      alert(err.message);
    } finally {
      clearTimeout(timeout);
      setLoading(false);
    }
  };

  if (loading && !details) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-gray-900 via-gray-800 to-black">
        <Loader />
      </div>
    );
  }

  if (!details) {
    return (
      <div className="min-h-screen  bg-gradient-to-b from-gray-900 via-gray-800 to-black text-white flex items-center justify-center">
        <div className="text-center">
          <p className="text-xl mb-4">No details found.</p>
          <Link to="/" className="text-blue-400 hover:text-blue-300 underline">
            ← Back to Home
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen  bg-gradient-to-b from-gray-900 via-gray-800 to-black text-white">
      {/* Add padding-top to account for fixed header */}
      <div className="!pt-24 pb-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <Link
            to="/"
            className="mb-6 inline-block text-sm text-gray-300 hover:text-gray-100 hover:underline transition-colors"
          >
            ← Back to Home
          </Link>

          {details.type === "movie" && (
            <MovieDetails
              movie={details}
              onWatch={handleWatch}
              loading={loading}
            />
          )}
          {details.type === "tv" && (
            <TVShowDetails
              show={details}
              onWatch={handleWatch}
              loading={loading}
            />
          )}
          {videoUrl && <VideoPlayer src={videoUrl} />}
        </div>
      </div>
    </div>
  );
}

export default DetailsPage;
</file>

<file path="src/services/streamApi.js">
const STREAM_SERVER_URL = "https://dotflix.onrender.com/geturl";

export async function sniffStream(embedUrl, signal) {
  try {
    const res = await fetch(STREAM_SERVER_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ url: embedUrl }),
      signal,
    });

    if (!res.ok) {
      throw new Error("Server error while fetching stream.");
    }

    const data = await res.json();
    return data.streamUrl;
  } catch (err) {
    if (err.name === "AbortError") {
      throw new Error(
        "⚠️ Server is restarting. Please wait 1 minute and try again."
      );
    }
    throw new Error(`❌ Failed to fetch stream: ${err.message}`);
  }
}
</file>

<file path="src/services/tmbdApi.js">
const API_KEY = "ad301b7cc82ffe19273e55e4d4206885";
const BASE_URL = "https://api.themoviedb.org/3";

async function fetchFromTMDb(endpoint) {
  const url = `${BASE_URL}/${endpoint}`;
  try {
    const res = await fetch(url);
    if (!res.ok) {
      console.error(`Failed to fetch from TMDb: ${res.statusText}`);
      return null;
    }
    return await res.json();
  } catch (err) {
    console.error("Error in fetchFromTMDb:", err);
    return null;
  }
}

export const searchMedia = (query) => {
  return fetchFromTMDb(
    `search/multi?api_key=${API_KEY}&query=${encodeURIComponent(
      query
    )}&language=en-US`
  );
};

export const getMediaDetails = (type, id) => {
  return fetchFromTMDb(`${type}/${id}?api_key=${API_KEY}&language=en-US`);
};

export const getSeasonDetails = (tvId, seasonNumber) => {
  return fetchFromTMDb(
    `tv/${tvId}/season/${seasonNumber}?api_key=${API_KEY}&language=en-US`
  );
};

export const getTrendingMedia = () => {
  // Changed from /day to /week
  return fetchFromTMDb(`trending/all/week?api_key=${API_KEY}&language=en-US`);
};

export const getTopRatedMovies = () => {
  // Changed from movie/top_rated to trending/movie/week for a weekly list
  return fetchFromTMDb(`trending/movie/week?api_key=${API_KEY}&language=en-US`);
};

export const getTopRatedShows = () => {
  // Changed from tv/top_rated to trending/tv/week for a weekly list
  return fetchFromTMDb(`trending/tv/week?api_key=${API_KEY}&language=en-US`);
};

// Genre IDs can be found on the TMDB website. Examples:
// Action: 28, Comedy: 35, Horror: 27, Sci-Fi: 878
export const getMediaByGenre = (genreId) => {
  return fetchFromTMDb(
    `discover/movie?api_key=${API_KEY}&with_genres=${genreId}&language=en-US&sort_by=popularity.desc`
  );
};
</file>

<file path="index.html">
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image" href="/src/assets/lotus.png" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400..800&family=Bitcount+Single+Ink:wght@100..900&family=League+Gothic&family=Oswald:wght@200..700&display=swap"
    rel="stylesheet">
  <title>Dotflix | The GenV Streaming Site</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html>
</file>

<file path="package.json">
{
  "name": "dotflix_1",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.13",
    "axios": "^1.12.2",
    "embla-carousel-react": "^8.6.0",
    "hls.js": "^1.6.13",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "react-intersection-observer": "^9.16.0",
    "react-router-dom": "^7.9.1",
    "slugify": "^1.6.6",
    "tailwindcss": "^4.1.13"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}
</file>

<file path="src/components/Hero.jsx">
import React, { useState, useEffect, useCallback } from "react";
import { getTrendingMedia } from "../services/tmbdApi";
import { Link } from "react-router-dom";
import { createSlug } from "../utils/slug";
import { FaPlay, FaInfoCircle } from "react-icons/fa";
import useEmblaCarousel from "embla-carousel-react";
import Loader from "./Loader";

function Hero() {
  const [trending, setTrending] = useState([]);
  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true });
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    const fetchTrending = async () => {
      const preloadImages = (urls) => {
        urls.forEach((url) => {
          const img = new Image();
          img.src = url;
        });
      };

      const data = await getTrendingMedia();
      if (data?.results) {
        const filtered = data.results
          .filter(
            (item) => item.backdrop_path && item.poster_path && item.overview
          )
          .slice(0, 7);
        setTrending(filtered);

        const backdropUrls = filtered.map(
          (item) => `https://image.tmdb.org/t/p/w1280${item.backdrop_path}`
        );
        preloadImages(backdropUrls);
      }
    };

    fetchTrending();
  }, []);

  const onSelect = useCallback(() => {
    if (!emblaApi) return;
    setCurrentIndex(emblaApi.selectedScrollSnap());
  }, [emblaApi]);

  useEffect(() => {
    if (!emblaApi) return;

    onSelect(); // fire once on mount
    emblaApi.on("select", onSelect);

    const autoplay = setInterval(() => {
      emblaApi.scrollNext();
    }, 5000);

    return () => {
      emblaApi.off("select", onSelect);
      clearInterval(autoplay);
    };
  }, [emblaApi, onSelect]);

  if (trending.length === 0) {
    return (
      <div className="h-screen w-full flex items-center justify-center bg-black">
        <Loader />
      </div>
    );
  }

  return (
    <div
      className="relative h-[90vh] md:h-screen w-full overflow-hidden cursor-grab select-none"
      ref={emblaRef}
    >
      <div className="flex h-full">
        {trending.map((item) => {
          const backdropUrl = `https://image.tmdb.org/t/p/w1280${item.backdrop_path}`;
          const posterUrl = `https://image.tmdb.org/t/p/w500${item.poster_path}`;
          const title = item.title || item.name;
          const slug = createSlug(item.id, title);

          return (
            <div className="flex-[0_0_100%] relative" key={item.id}>
              {/* Background */}
              <div
                className="absolute inset-0 bg-cover bg-center transition-opacity duration-1000"
                style={{ backgroundImage: `url(${backdropUrl})` }}
              >
                <div className="absolute inset-0 bg-black/70 bg-gradient-to-t from-black via-transparent to-black/30" />
              </div>

              {/* Foreground content */}
              <div className="relative z-10 flex h-full items-center justify-center px-6 md:px-12">
                <div className="flex items-center justify-center gap-8 max-w-6xl w-full">
                  {/* Left side: text */}
                  <div className="max-w-xl text-white space-y-4 animate-fade-in">
                    <h1 className="text-4xl md:text-6xl font-bold leading-tight">
                      {title}
                    </h1>
                    <p className="text-gray-300 text-sm md:text-base line-clamp-3 select-text">
                      {item.overview}
                    </p>
                    <div className="flex items-center gap-4 pt-4">
                      <Link
                        to={`/${item.media_type}/${slug}`}
                        className="flex items-center gap-2 px-6 py-3 bg-white/90 text-black font-semibold rounded-lg hover:bg-white transition"
                      >
                        <FaPlay /> Watch Now
                      </Link>
                      <Link
                        to={`/${item.media_type}/${slug}`}
                        className="flex items-center gap-2 px-6 py-3 bg-gray-500/70 text-white font-semibold rounded-lg hover:bg-gray-500/90 transition"
                      >
                        <FaInfoCircle /> More Info
                      </Link>
                    </div>
                  </div>

                  {/* Right side: thumbnail */}
                  <div className="hidden md:block max-w-xs flex-shrink-0">
                    <img
                      src={posterUrl}
                      alt={title}
                      className="rounded-lg shadow-lg w-full"
                    />
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Dots navigation */}
      <div className="absolute bottom-6 left-1/2 -translate-x-1/2 flex gap-2">
        {trending.map((_, index) => (
          <button
            key={index}
            onClick={() => emblaApi && emblaApi.scrollTo(index)}
            className={`w-3 h-3 rounded-full transition-all ${
              currentIndex === index
                ? "!bg-white"
                : "bg-white/40 hover:bg-white/60"
            }`}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
}

export default Hero;
</file>

<file path="src/components/ResultsGrid.jsx">
import React from "react";
import { Link } from "react-router-dom";
import { createSlug } from "../utils/slug";
import RatingBadge from "./RatingBadge";

function ResultsGrid({ results }) {
  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Results</h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-6">
        {results.map((r) => (
          <Link
            to={`/${r.media_type}/${createSlug(r.id, r.title || r.name)}`}
            key={r.id}
          >
            <div className="relative bg-gray-800/40 rounded-lg overflow-hidden shadow-lg hover:scale-105 transition transform cursor-pointer">
              {/* Rating Badge - positioned at top-left */}
              <div className="absolute bottom-13 left-0 z-10">
                <RatingBadge rating={r.vote_average} />
              </div>

              {/* Poster */}
              {r.poster_path ? (
                <img
                  src={`https://image.tmdb.org/t/p/w300${r.poster_path}`}
                  alt={r.title || r.name}
                  className="w-full h-86 object-cover"
                />
              ) : (
                <div className="w-full h-64 bg-gray-700 flex items-center justify-center text-gray-400 text-xs">
                  No Image
                </div>
              )}

              {/* Metadata overlay */}
              <div className="absolute bottom-0 w-full bg-black/80 p-2 text-xs sm:text-sm">
                <div className="flex items-end gap-2">
                  <div className="flex-1 min-w-0">
                    <h3 className="font-semibold truncate">
                      {r.title || r.name}
                    </h3>

                    <div className="flex items-center justify-between text-gray-300 gap-x-2">
                      {/* Year (movie: release_date | tv: first_air_date) */}
                      {(r.release_date || r.first_air_date) && (
                        <span>
                          {new Date(
                            r.release_date || r.first_air_date
                          ).getFullYear()}
                        </span>
                      )}

                      {/* Runtime (only for movies usually) */}
                      {r.runtime && <span>{r.runtime} min</span>}

                      {/* Genres */}
                      {r.genres && r.genres.length > 0 && (
                        <span className="truncate">
                          {r.genres.map((g) => g.name).join(", ")}
                        </span>
                      )}

                      {/* Media type */}
                      <span className="italic text-gray-400">
                        {r.media_type}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
}

export default ResultsGrid;
</file>

<file path="src/index.css">
@import "tailwindcss";

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #121212;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

*{
  font-family: "Oswald", sans-serif;

}

body {
    background-color: #121212;
}

a {
  font-weight: 500;
  text-decoration: inherit;
}


h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

/* Custom Scrollbar Styles for Media Rows */
.media-row::-webkit-scrollbar {
  height: 8px;
}
.media-row::-webkit-scrollbar-track {
  background: transparent;
}
.media-row::-webkit-scrollbar-thumb {
  background: rgba(229, 9, 20, 0.7); /* Netflix Red */
  border-radius: 4px;
}
.media-row::-webkit-scrollbar-thumb:hover {
    background: rgba(229, 9, 20, 1);
}
</file>

<file path="src/pages/Home.jsx">
import React from "react";
import { useInView } from "react-intersection-observer";
import Hero from "../components/Hero";
import MediaRow from "../components/MediaRow";
import {
  getTrendingMedia,
  getTopRatedMovies,
  getTopRatedShows,
  getMediaByGenre,
} from "../services/tmbdApi";
import Loader from "../components/Loader";

// Modern LazyLoad component using react-intersection-observer
const LazyLoad = ({ children, height = 340, offset = 200, placeholder }) => {
  const { ref, inView } = useInView({
    threshold: 0,
    triggerOnce: true,
    rootMargin: `${offset}px 0px`,
  });

  return (
    <div ref={ref} style={{ minHeight: height }}>
      {inView ? children : placeholder}
    </div>
  );
};

// Placeholder for lazy-loaded components
const Placeholder = () => (
  <div className="h-[340px] flex justify-center items-center">
    <Loader />
  </div>
);

function Home() {
  return (
    <div className="bg-black text-white">
      <Hero />
      <div className="p-6 md:p-12">
        <LazyLoad height={340} offset={200} placeholder={<Placeholder />}>
          <MediaRow title="Trending Now" fetchData={getTrendingMedia} />
        </LazyLoad>

        <LazyLoad height={340} offset={200} placeholder={<Placeholder />}>
          <MediaRow
            title="Weekly Top 10 Movies"
            fetchData={getTopRatedMovies}
            media_type="movie"
          />
        </LazyLoad>

        <LazyLoad height={340} offset={200} placeholder={<Placeholder />}>
          <MediaRow
            title="Weekly Top 10 Shows"
            fetchData={getTopRatedShows}
            media_type="tv"
          />
        </LazyLoad>

        <LazyLoad height={340} offset={200} placeholder={<Placeholder />}>
          <MediaRow
            title="Action & Adventure"
            fetchData={() => getMediaByGenre(28)}
            media_type="movie"
          />
        </LazyLoad>

        <LazyLoad height={340} offset={200} placeholder={<Placeholder />}>
          <MediaRow
            title="Comedy"
            fetchData={() => getMediaByGenre(35)}
            media_type="movie"
          />
        </LazyLoad>

        <LazyLoad height={340} offset={200} placeholder={<Placeholder />}>
          <MediaRow
            title="Sci-Fi & Fantasy"
            fetchData={() => getMediaByGenre(878)}
            media_type="movie"
          />
        </LazyLoad>
      </div>
    </div>
  );
}

export default Home;
</file>

</files>
